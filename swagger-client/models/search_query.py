# coding: utf-8

"""
    EDUWS API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.1
    Contact: info@er76.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SearchQuery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'term': 'list[TermField]',
        'limit': 'int',
        'offset': 'int',
        'page': 'int',
        'order_by': 'str',
        'order': 'str'
    }

    attribute_map = {
        'term': 'term',
        'limit': 'limit',
        'offset': 'offset',
        'page': 'page',
        'order_by': 'order_by',
        'order': 'order'
    }

    def __init__(self, term=None, limit=None, offset=None, page=None, order_by=None, order=None):  # noqa: E501
        """SearchQuery - a model defined in Swagger"""  # noqa: E501
        self._term = None
        self._limit = None
        self._offset = None
        self._page = None
        self._order_by = None
        self._order = None
        self.discriminator = None
        if term is not None:
            self.term = term
        if limit is not None:
            self.limit = limit
        if offset is not None:
            self.offset = offset
        if page is not None:
            self.page = page
        if order_by is not None:
            self.order_by = order_by
        if order is not None:
            self.order = order

    @property
    def term(self):
        """Gets the term of this SearchQuery.  # noqa: E501

        Поисковые параметры  # noqa: E501

        :return: The term of this SearchQuery.  # noqa: E501
        :rtype: list[TermField]
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this SearchQuery.

        Поисковые параметры  # noqa: E501

        :param term: The term of this SearchQuery.  # noqa: E501
        :type: list[TermField]
        """

        self._term = term

    @property
    def limit(self):
        """Gets the limit of this SearchQuery.  # noqa: E501

        Лимитирует кол-во записей результата  # noqa: E501

        :return: The limit of this SearchQuery.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this SearchQuery.

        Лимитирует кол-во записей результата  # noqa: E501

        :param limit: The limit of this SearchQuery.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this SearchQuery.  # noqa: E501

        Сдвиг результата относительно начала выборки  # noqa: E501

        :return: The offset of this SearchQuery.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this SearchQuery.

        Сдвиг результата относительно начала выборки  # noqa: E501

        :param offset: The offset of this SearchQuery.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def page(self):
        """Gets the page of this SearchQuery.  # noqa: E501

        Номер страницы (игнорируется, если указан offset)  # noqa: E501

        :return: The page of this SearchQuery.  # noqa: E501
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this SearchQuery.

        Номер страницы (игнорируется, если указан offset)  # noqa: E501

        :param page: The page of this SearchQuery.  # noqa: E501
        :type: int
        """

        self._page = page

    @property
    def order_by(self):
        """Gets the order_by of this SearchQuery.  # noqa: E501

        Название поля, по которому необходимо произвести сортировку результата  # noqa: E501

        :return: The order_by of this SearchQuery.  # noqa: E501
        :rtype: str
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this SearchQuery.

        Название поля, по которому необходимо произвести сортировку результата  # noqa: E501

        :param order_by: The order_by of this SearchQuery.  # noqa: E501
        :type: str
        """

        self._order_by = order_by

    @property
    def order(self):
        """Gets the order of this SearchQuery.  # noqa: E501

        Направление сортировки (a - от меньшего к большему, d - от большего к меньшему)  # noqa: E501

        :return: The order of this SearchQuery.  # noqa: E501
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this SearchQuery.

        Направление сортировки (a - от меньшего к большему, d - от большего к меньшему)  # noqa: E501

        :param order: The order of this SearchQuery.  # noqa: E501
        :type: str
        """
        allowed_values = ["a", "d"]  # noqa: E501
        if order not in allowed_values:
            raise ValueError(
                "Invalid value for `order` ({0}), must be one of {1}"  # noqa: E501
                .format(order, allowed_values)
            )

        self._order = order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchQuery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
