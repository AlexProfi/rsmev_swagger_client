# coding: utf-8

"""
    EDUWS API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.1
    Contact: info@er76.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TypeinfoApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def ti_search_form(self, slug, **kwargs):  # noqa: E501
        """Получает список параметров для поиска по элементам ВС указанного типа  # noqa: E501

        Получает список параметров для поиска по элементам ВС указанного типа. Данная информация должна использоваться для построения формы на стороне клиента.   Возможные типы поисковых полей:   * `AutoField`: TextInput(Integer)   * `IntegerField`: TextInput(Integer)   * `CharField`: TextInput(Char)   * `TextField`: TextInput(Char)   * `BooleanField`: CheckboxInput(Boolean)   * `SmallIntegerField`: TextInput(Integer)   * `PositiveSmallIntegerField`: TextInput(Integer)   * `ChoiceField`: Select(Char)   * `ForeignKey`: Select(Char)   * `ManyToManyField`: MultipleChoiceField(Array of Char)   Для даты или даты-времени всегда на стороне клиента должно быть сформировано   два поля \"от ... до ...\", которые в поисковом запросе должны передаваться   последовательно с одним и тем же именем. Значения могут быть пустыми.   Например: date=2019-01-01&date= или date=2019-12-31&date=2019-01-01   * `DateField`: Array of 0 or 2 DateField(Date)   * `DateTimeField`: Array of 0 or 2 DateTimeField(DateTime)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ti_search_form(slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str slug: Тип ВС (например: initiativedistribution) (required)
        :return: SearchForm
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ti_search_form_with_http_info(slug, **kwargs)  # noqa: E501
        else:
            (data) = self.ti_search_form_with_http_info(slug, **kwargs)  # noqa: E501
            return data

    def ti_search_form_with_http_info(self, slug, **kwargs):  # noqa: E501
        """Получает список параметров для поиска по элементам ВС указанного типа  # noqa: E501

        Получает список параметров для поиска по элементам ВС указанного типа. Данная информация должна использоваться для построения формы на стороне клиента.   Возможные типы поисковых полей:   * `AutoField`: TextInput(Integer)   * `IntegerField`: TextInput(Integer)   * `CharField`: TextInput(Char)   * `TextField`: TextInput(Char)   * `BooleanField`: CheckboxInput(Boolean)   * `SmallIntegerField`: TextInput(Integer)   * `PositiveSmallIntegerField`: TextInput(Integer)   * `ChoiceField`: Select(Char)   * `ForeignKey`: Select(Char)   * `ManyToManyField`: MultipleChoiceField(Array of Char)   Для даты или даты-времени всегда на стороне клиента должно быть сформировано   два поля \"от ... до ...\", которые в поисковом запросе должны передаваться   последовательно с одним и тем же именем. Значения могут быть пустыми.   Например: date=2019-01-01&date= или date=2019-12-31&date=2019-01-01   * `DateField`: Array of 0 or 2 DateField(Date)   * `DateTimeField`: Array of 0 or 2 DateTimeField(DateTime)   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ti_search_form_with_http_info(slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str slug: Тип ВС (например: initiativedistribution) (required)
        :return: SearchForm
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['slug']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ti_search_form" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'slug' is set
        if ('slug' not in params or
                params['slug'] is None):
            raise ValueError("Missing the required parameter `slug` when calling `ti_search_form`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'slug' in params:
            path_params['slug'] = params['slug']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/typeinfo/{slug}/searchform/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchForm',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def typeinfo_list(self, slug, **kwargs):  # noqa: E501
        """Получает список данных по ВС, указанному в slug  # noqa: E501

        Получает список данных по ВС с возможностью поиска, сортировки и постраничного получения результата   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.typeinfo_list(slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str slug: Идентификатор ВС (например: initiativedistribution) (required)
        :param SearchQuery body: Параметры фильтрации
        :param str search: поисковая строка для фильтрации вывода
        :return: SearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.typeinfo_list_with_http_info(slug, **kwargs)  # noqa: E501
        else:
            (data) = self.typeinfo_list_with_http_info(slug, **kwargs)  # noqa: E501
            return data

    def typeinfo_list_with_http_info(self, slug, **kwargs):  # noqa: E501
        """Получает список данных по ВС, указанному в slug  # noqa: E501

        Получает список данных по ВС с возможностью поиска, сортировки и постраничного получения результата   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.typeinfo_list_with_http_info(slug, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str slug: Идентификатор ВС (например: initiativedistribution) (required)
        :param SearchQuery body: Параметры фильтрации
        :param str search: поисковая строка для фильтрации вывода
        :return: SearchResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['slug', 'body', 'search']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method typeinfo_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'slug' is set
        if ('slug' not in params or
                params['slug'] is None):
            raise ValueError("Missing the required parameter `slug` when calling `typeinfo_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'slug' in params:
            path_params['slug'] = params['slug']  # noqa: E501

        query_params = []
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/typeinfo/{slug}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def typeinfo_retrieve(self, slug, id, **kwargs):  # noqa: E501
        """Возвращает элемент по id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.typeinfo_retrieve(slug, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str slug: Идентификатор ВС (например: initiativedistribution) (required)
        :param str id: guid записи (required)
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.typeinfo_retrieve_with_http_info(slug, id, **kwargs)  # noqa: E501
        else:
            (data) = self.typeinfo_retrieve_with_http_info(slug, id, **kwargs)  # noqa: E501
            return data

    def typeinfo_retrieve_with_http_info(self, slug, id, **kwargs):  # noqa: E501
        """Возвращает элемент по id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.typeinfo_retrieve_with_http_info(slug, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str slug: Идентификатор ВС (например: initiativedistribution) (required)
        :param str id: guid записи (required)
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['slug', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method typeinfo_retrieve" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'slug' is set
        if ('slug' not in params or
                params['slug'] is None):
            raise ValueError("Missing the required parameter `slug` when calling `typeinfo_retrieve`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `typeinfo_retrieve`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'slug' in params:
            path_params['slug'] = params['slug']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/typeinfo/{slug}/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
