# coding: utf-8

"""
    EDUWS API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.1
    Contact: info@er76.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HistoryStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'status': 'int',
        'comment': 'str',
        'state': 'int',
        'epgu_number': 'str',
        'state_name': 'str',
        'state_message': 'str',
        'date_occured': 'str',
        'message_type': 'str',
        'reply_to': 'str'
    }

    attribute_map = {
        'id': 'id',
        'status': 'status',
        'comment': 'comment',
        'state': 'state',
        'epgu_number': 'epgu_number',
        'state_name': 'state_name',
        'state_message': 'state_message',
        'date_occured': 'date_occured',
        'message_type': 'message_type',
        'reply_to': 'reply_to'
    }

    def __init__(self, id=None, status=None, comment=None, state=None, epgu_number=None, state_name=None, state_message=None, date_occured=None, message_type=None, reply_to=None):  # noqa: E501
        """HistoryStatus - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._status = None
        self._comment = None
        self._state = None
        self._epgu_number = None
        self._state_name = None
        self._state_message = None
        self._date_occured = None
        self._message_type = None
        self._reply_to = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if status is not None:
            self.status = status
        if comment is not None:
            self.comment = comment
        if state is not None:
            self.state = state
        if epgu_number is not None:
            self.epgu_number = epgu_number
        if state_name is not None:
            self.state_name = state_name
        if state_message is not None:
            self.state_message = state_message
        if date_occured is not None:
            self.date_occured = date_occured
        if message_type is not None:
            self.message_type = message_type
        if reply_to is not None:
            self.reply_to = reply_to

    @property
    def id(self):
        """Gets the id of this HistoryStatus.  # noqa: E501

        id  # noqa: E501

        :return: The id of this HistoryStatus.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HistoryStatus.

        id  # noqa: E501

        :param id: The id of this HistoryStatus.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def status(self):
        """Gets the status of this HistoryStatus.  # noqa: E501

        Идентификатор статуса ЕПГУ  # noqa: E501

        :return: The status of this HistoryStatus.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this HistoryStatus.

        Идентификатор статуса ЕПГУ  # noqa: E501

        :param status: The status of this HistoryStatus.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def comment(self):
        """Gets the comment of this HistoryStatus.  # noqa: E501

        Произвольный комментарий к статусу  # noqa: E501

        :return: The comment of this HistoryStatus.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this HistoryStatus.

        Произвольный комментарий к статусу  # noqa: E501

        :param comment: The comment of this HistoryStatus.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def state(self):
        """Gets the state of this HistoryStatus.  # noqa: E501

        Состояние передачи статуса на ЕПГУ Возможные значения поля:   * 0 - Ошибка приема СМЭВ   * 1 - В очереди РСМЭМ   * 2 - В очереди СМЭВ   * 3 - Доставлено СМЭВ   # noqa: E501

        :return: The state of this HistoryStatus.  # noqa: E501
        :rtype: int
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this HistoryStatus.

        Состояние передачи статуса на ЕПГУ Возможные значения поля:   * 0 - Ошибка приема СМЭВ   * 1 - В очереди РСМЭМ   * 2 - В очереди СМЭВ   * 3 - Доставлено СМЭВ   # noqa: E501

        :param state: The state of this HistoryStatus.  # noqa: E501
        :type: int
        """

        self._state = state

    @property
    def epgu_number(self):
        """Gets the epgu_number of this HistoryStatus.  # noqa: E501

        Номер епгу  # noqa: E501

        :return: The epgu_number of this HistoryStatus.  # noqa: E501
        :rtype: str
        """
        return self._epgu_number

    @epgu_number.setter
    def epgu_number(self, epgu_number):
        """Sets the epgu_number of this HistoryStatus.

        Номер епгу  # noqa: E501

        :param epgu_number: The epgu_number of this HistoryStatus.  # noqa: E501
        :type: str
        """

        self._epgu_number = epgu_number

    @property
    def state_name(self):
        """Gets the state_name of this HistoryStatus.  # noqa: E501

        Текстовое наименование состояния  # noqa: E501

        :return: The state_name of this HistoryStatus.  # noqa: E501
        :rtype: str
        """
        return self._state_name

    @state_name.setter
    def state_name(self, state_name):
        """Sets the state_name of this HistoryStatus.

        Текстовое наименование состояния  # noqa: E501

        :param state_name: The state_name of this HistoryStatus.  # noqa: E501
        :type: str
        """

        self._state_name = state_name

    @property
    def state_message(self):
        """Gets the state_message of this HistoryStatus.  # noqa: E501

        Ответ сервера ЕПГУ на получение статуса  # noqa: E501

        :return: The state_message of this HistoryStatus.  # noqa: E501
        :rtype: str
        """
        return self._state_message

    @state_message.setter
    def state_message(self, state_message):
        """Sets the state_message of this HistoryStatus.

        Ответ сервера ЕПГУ на получение статуса  # noqa: E501

        :param state_message: The state_message of this HistoryStatus.  # noqa: E501
        :type: str
        """

        self._state_message = state_message

    @property
    def date_occured(self):
        """Gets the date_occured of this HistoryStatus.  # noqa: E501

        Дата и время сохранения статуса (UTC)  # noqa: E501

        :return: The date_occured of this HistoryStatus.  # noqa: E501
        :rtype: str
        """
        return self._date_occured

    @date_occured.setter
    def date_occured(self, date_occured):
        """Sets the date_occured of this HistoryStatus.

        Дата и время сохранения статуса (UTC)  # noqa: E501

        :param date_occured: The date_occured of this HistoryStatus.  # noqa: E501
        :type: str
        """

        self._date_occured = date_occured

    @property
    def message_type(self):
        """Gets the message_type of this HistoryStatus.  # noqa: E501

        Тип сообщения Возможные значения поля:   * create - создание   * update - изменение   * cancel - отмена   * send - отправка   * receive - прием   # noqa: E501

        :return: The message_type of this HistoryStatus.  # noqa: E501
        :rtype: str
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this HistoryStatus.

        Тип сообщения Возможные значения поля:   * create - создание   * update - изменение   * cancel - отмена   * send - отправка   * receive - прием   # noqa: E501

        :param message_type: The message_type of this HistoryStatus.  # noqa: E501
        :type: str
        """

        self._message_type = message_type

    @property
    def reply_to(self):
        """Gets the reply_to of this HistoryStatus.  # noqa: E501

        ReplyTo  # noqa: E501

        :return: The reply_to of this HistoryStatus.  # noqa: E501
        :rtype: str
        """
        return self._reply_to

    @reply_to.setter
    def reply_to(self, reply_to):
        """Sets the reply_to of this HistoryStatus.

        ReplyTo  # noqa: E501

        :param reply_to: The reply_to of this HistoryStatus.  # noqa: E501
        :type: str
        """

        self._reply_to = reply_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HistoryStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HistoryStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
