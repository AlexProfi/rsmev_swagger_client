# coding: utf-8

"""
    EDUWS API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.1
    Contact: info@er76.ru
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'int',
        'comment': 'str',
        'force': 'bool',
        'filter': 'int',
        'exclude': 'bool'
    }

    attribute_map = {
        'status': 'status',
        'comment': 'comment',
        'force': 'force',
        'filter': 'filter',
        'exclude': 'exclude'
    }

    def __init__(self, status=None, comment=None, force=True, filter=None, exclude=False):  # noqa: E501
        """UpdateStatus - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._comment = None
        self._force = None
        self._filter = None
        self._exclude = None
        self.discriminator = None
        self.status = status
        if comment is not None:
            self.comment = comment
        if force is not None:
            self.force = force
        if filter is not None:
            self.filter = filter
        if exclude is not None:
            self.exclude = exclude

    @property
    def status(self):
        """Gets the status of this UpdateStatus.  # noqa: E501

        Идентификатор статуса ЕПГУ  # noqa: E501

        :return: The status of this UpdateStatus.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UpdateStatus.

        Идентификатор статуса ЕПГУ  # noqa: E501

        :param status: The status of this UpdateStatus.  # noqa: E501
        :type: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def comment(self):
        """Gets the comment of this UpdateStatus.  # noqa: E501

        Комментарий  # noqa: E501

        :return: The comment of this UpdateStatus.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this UpdateStatus.

        Комментарий  # noqa: E501

        :param comment: The comment of this UpdateStatus.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def force(self):
        """Gets the force of this UpdateStatus.  # noqa: E501

        Отправить независимо наличия статуса в истории  # noqa: E501

        :return: The force of this UpdateStatus.  # noqa: E501
        :rtype: bool
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this UpdateStatus.

        Отправить независимо наличия статуса в истории  # noqa: E501

        :param force: The force of this UpdateStatus.  # noqa: E501
        :type: bool
        """

        self._force = force

    @property
    def filter(self):
        """Gets the filter of this UpdateStatus.  # noqa: E501

        Состояние статуса для которого производим проверку отправлять или нет Возможные значения поля:   * 0 - Ошибка приема СМЭВ   * 1 - В очереди РСМЭМ   * 2 - В очереди СМЭВ   * 3 - Доставлено СМЭВ   # noqa: E501

        :return: The filter of this UpdateStatus.  # noqa: E501
        :rtype: int
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this UpdateStatus.

        Состояние статуса для которого производим проверку отправлять или нет Возможные значения поля:   * 0 - Ошибка приема СМЭВ   * 1 - В очереди РСМЭМ   * 2 - В очереди СМЭВ   * 3 - Доставлено СМЭВ   # noqa: E501

        :param filter: The filter of this UpdateStatus.  # noqa: E501
        :type: int
        """

        self._filter = filter

    @property
    def exclude(self):
        """Gets the exclude of this UpdateStatus.  # noqa: E501

        Исключить из проверки указанное в filter состояние  # noqa: E501

        :return: The exclude of this UpdateStatus.  # noqa: E501
        :rtype: bool
        """
        return self._exclude

    @exclude.setter
    def exclude(self, exclude):
        """Sets the exclude of this UpdateStatus.

        Исключить из проверки указанное в filter состояние  # noqa: E501

        :param exclude: The exclude of this UpdateStatus.  # noqa: E501
        :type: bool
        """

        self._exclude = exclude

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
